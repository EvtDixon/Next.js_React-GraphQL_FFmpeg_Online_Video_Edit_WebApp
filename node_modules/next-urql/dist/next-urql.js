function _interopDefault(ex) {
  return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
}

function _extends() {
  return (_extends = Object.assign || function(target) {
    var i, source, key;
    for (i = 1; i < arguments.length; i++) {
      source = arguments[i];
      for (key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  }).apply(this, arguments);
}

function initUrqlClient(clientOptions) {
  var isServer = "undefined" == typeof window;
  if (isServer || !urqlClient) {
    urqlClient = urql.createClient(_extends({}, clientOptions, {
      suspense: isServer || clientOptions.suspense
    }));
  }
  return urqlClient;
}

function _ref() {
  return null;
}

var ssr, React = _interopDefault(require("react")), ssrPrepass = _interopDefault(require("react-ssr-prepass")), urql = require("urql"), urqlClient = null;

exports.withUrqlClient = function withUrqlClient(getClientConfig, options) {
  if (!options) {
    options = {};
  }
  return function(AppOrPage) {
    var withUrql = function(ref) {
      var urqlClient = ref.urqlClient, urqlState = ref.urqlState, rest$1 = function objectWithoutProperties(obj, exclude) {
        var k, target = {};
        for (k in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, k) && -1 === exclude.indexOf(k)) {
            target[k] = obj[k];
          }
        }
        return target;
      }(ref, [ "urqlClient", "urqlState" ]), rest = rest$1, client = React.useMemo((function() {
        if (urqlClient) {
          return urqlClient;
        }
        if (!ssr || "undefined" == typeof window) {
          ssr = urql.ssrExchange({
            initialState: urqlState
          });
        }
        var clientConfig = getClientConfig(ssr);
        if (!clientConfig.exchanges) {
          clientConfig.exchanges = [ urql.dedupExchange, urql.cacheExchange, ssr, urql.fetchExchange ];
        }
        return initUrqlClient(clientConfig);
      }), [ urqlClient, urqlState ]);
      return React.createElement(urql.Provider, {
        value: client
      }, React.createElement(AppOrPage, _extends({
        urqlClient: client
      }, rest)));
    };
    withUrql.displayName = "withUrqlClient(" + function getDisplayName(Component) {
      return Component.displayName || Component.name || "Component";
    }(AppOrPage) + ")";
    if (AppOrPage.getInitialProps || options.ssr) {
      withUrql.getInitialProps = function _ref5(appOrPageCtx) {
        function _ref2() {
          urqlClient.toJSON = _ref;
          return _extends({}, pageProps, {
            urqlState: ssrCache ? ssrCache.extractData() : void 0,
            urqlClient: urqlClient
          });
        }
        function _temp2() {
          var props;
          if ("undefined" != typeof window) {
            return _extends({}, pageProps, {
              urqlClient: urqlClient
            });
          }
          props = _extends({}, pageProps, {
            urqlClient: urqlClient
          });
          return Promise.resolve(ssrPrepass(React.createElement(AppTree, _extends({}, isApp ? props : {
            pageProps: props
          })))).then(_ref2);
        }
        function _ref3(_AppOrPage$getInitial) {
          pageProps = _AppOrPage$getInitial;
        }
        var AppTree, isApp, ctx, ssrCache, clientConfig, urqlClient, pageProps;
        try {
          AppTree = appOrPageCtx.AppTree;
          ctx = (isApp = !!appOrPageCtx.Component) ? appOrPageCtx.ctx : appOrPageCtx;
          ssrCache = urql.ssrExchange({
            initialState: void 0
          });
          if (!(clientConfig = getClientConfig(ssrCache, ctx)).exchanges) {
            clientConfig.exchanges = [ urql.dedupExchange, urql.cacheExchange, ssrCache, urql.fetchExchange ];
          }
          if (urqlClient = initUrqlClient(clientConfig)) {
            ctx.urqlClient = urqlClient;
          }
          pageProps = {};
          const _temp = function _ref4() {
            if (AppOrPage.getInitialProps) {
              return Promise.resolve(AppOrPage.getInitialProps(appOrPageCtx)).then(_ref3);
            }
          }();
          return Promise.resolve(_temp && _temp.then ? _temp.then(_temp2) : _temp2());
        } catch (e) {
          return Promise.reject(e);
        }
      };
    }
    return withUrql;
  };
};
//# sourceMappingURL=next-urql.js.map
